// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Modal
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  style={undefined}
  transparent={false}
  visible={true}
>
  <Modal
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    visible={false}
  >
    <RCTScrollView
      alwaysBounceHorizontal={undefined}
      alwaysBounceVertical={true}
      centerContent={true}
      contentContainerStyle={
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        }
      }
      maximumZoomScale={3}
      minimumZoomScale={0.5}
      onContentSizeChange={null}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={undefined}
      onResponderTerminationRequest={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      onScrollShouldSetResponder={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      sendMomentumEvents={false}
      style={
        Array [
          Object {
            "flexDirection": "column",
            "flexGrow": 1,
            "flexShrink": 1,
            "overflow": "scroll",
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        removeClippedSubviews={undefined}
        style={
          Array [
            undefined,
            Object {
              "alignItems": "center",
              "justifyContent": "center",
            },
          ]
        }
      >
        <Image
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hitSlop={undefined}
          maximumZoomScale={3}
          minimumZoomScale={0.5}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onTap={[Function]}
          resizeMode="contain"
          source={
            Object {
              "uri": undefined,
            }
          }
          style={
            Object {
              "height": 1334,
              "width": 750,
            }
          }
          testID={undefined}
        />
      </View>
    </RCTScrollView>
  </Modal>
  <View>
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#268da8",
          "flexDirection": "row",
          "height": 60,
          "justifyContent": "space-between",
        }
      }
    >
      <View
        style={
          Object {
            "alignSelf": "center",
            "padding": 5,
            "top": 4,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={false}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "white",
                  "fontSize": 40,
                },
                Object {
                  "backgroundColor": "#268da8",
                  "color": "white",
                },
                Object {
                  "fontFamily": "FontAwesome",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
              ]
            }
          >
            ï‹“
          </Text>
        </View>
      </View>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "color": "white",
            "fontSize": 20,
            "fontWeight": "bold",
          }
        }
      >
        test record
      </Text>
      <View
        style={undefined}
      />
    </View>
  </View>
  <RCTScrollView
    alwaysBounceHorizontal={undefined}
    alwaysBounceVertical={true}
    onContentSizeChange={null}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={undefined}
    onResponderTerminationRequest={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    onScrollShouldSetResponder={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    sendMomentumEvents={false}
    style={
      Array [
        Object {
          "flexDirection": "column",
          "flexGrow": 1,
          "flexShrink": 1,
          "overflow": "scroll",
        },
        undefined,
      ]
    }
  >
    <View
      collapsable={false}
      removeClippedSubviews={undefined}
      style={
        Array [
          undefined,
          undefined,
        ]
      }
    >
      <RCTScrollView
        alwaysBounceHorizontal={true}
        alwaysBounceVertical={false}
        horizontal={true}
        onContentSizeChange={null}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onResponderGrant={[Function]}
        onResponderReject={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={undefined}
        onResponderTerminationRequest={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        onScrollShouldSetResponder={[Function]}
        onStartShouldSetResponder={[Function]}
        onStartShouldSetResponderCapture={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        sendMomentumEvents={false}
        style={
          Array [
            Object {
              "flexDirection": "row",
              "flexGrow": 1,
              "flexShrink": 1,
              "overflow": "scroll",
            },
            Object {
              "flexDirection": "row",
              "padding": 20,
            },
          ]
        }
      >
        <View
          collapsable={false}
          removeClippedSubviews={undefined}
          style={
            Array [
              Object {
                "flexDirection": "row",
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Object {
                "paddingRight": 10,
              }
            }
          >
            <WebView
              source={
                Object {
                  "uri": "https://www.youtube.com/watch?v=i64wvdnHSIw",
                }
              }
              style={
                Object {
                  "borderRadius": 10,
                  "height": 200,
                  "width": 200,
                }
              }
            />
          </View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Object {
                  "paddingRight": 10,
                },
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Image
              source={
                Object {
                  "uri": "https://image1.png",
                }
              }
              style={
                Object {
                  "borderRadius": 10,
                  "height": 200,
                  "width": 200,
                }
              }
            />
          </View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Object {
                  "paddingRight": 10,
                },
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Image
              source={
                Object {
                  "uri": "https://image2.png",
                }
              }
              style={
                Object {
                  "borderRadius": 10,
                  "height": 200,
                  "width": 200,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
      <View
        style={
          Object {
            "borderColor": "#efeff4",
            "borderWidth": 10,
          }
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#679fad",
              "fontSize": 20,
              "fontWeight": "bold",
              "padding": 10,
            }
          }
        />
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "fontSize": 18,
              "padding": 10,
              "paddingTop": 10,
            }
          }
        />
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "fontSize": 30,
              "fontWeight": "bold",
              "padding": 10,
            }
          }
        >
          Associated Links
        </Text>
        <View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#679fad",
                  "fontSize": 20,
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
            >
              https://link1.html
            </Text>
          </View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#679fad",
                  "fontSize": 20,
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
            >
              https://link2.html
            </Text>
          </View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#679fad",
                  "fontSize": 20,
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
            >
              https://link3.html
            </Text>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</Modal>
`;
